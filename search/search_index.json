{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hookah An elegantly minimal solution for Git hooks Content For a guide, see Guide For a reference, see Reference","title":"Hookah"},{"location":"#hookah","text":"An elegantly minimal solution for Git hooks","title":"Hookah"},{"location":"#content","text":"For a guide, see Guide For a reference, see Reference","title":"Content"},{"location":"api/","text":"Hookah lib.sh Hookah: An elegantly minimal solution for Git hooks Overview Hookah streamlines the process of managing Git hooks. This file is a library of functions that can easily be used by hooks written in Bash. Use it by prepending your hook script with the following #!/usr/bin/env bash source \"${0%/*}/.hookah/lib.sh\" hookah.init Learn more about it on GitHub Index hookah.init() hookah.run() hookah.run_allow_fail() hookah.die() hookah.warn() hookah.info() hookah.is_ci() hookah.init() Initiates the environment, sets up stacktrace printing on the 'ERR' trap, and sets the directory to the root of the Git repository Function has no arguments. hookah.run() Prints a command before running it Arguments ... (Command): to execute hookah.run_allow_fail() Prints a command before running it. But, if the command fails, do not abort execution Arguments ... (Command): to execute hookah.die() Prints $1 formatted as an error and the stacktrace to standard error, then exits with code 1 Arguments $1 (string): Text to print hookah.warn() Prints $1 formatted as a warning to standard error Arguments $1 (string): Text to print hookah.info() Prints $1 formatted as information to standard output Arguments $1 (string): Text to print hookah.is_ci() Scans environment variables to determine if script is in a CI environment Variables set REPLY (Current): provider for CI Exit codes 0 : If in CI 1 : If not in CI","title":"Hookah lib.sh"},{"location":"api/#hookah-libsh","text":"Hookah: An elegantly minimal solution for Git hooks","title":"Hookah lib.sh"},{"location":"api/#overview","text":"Hookah streamlines the process of managing Git hooks. This file is a library of functions that can easily be used by hooks written in Bash. Use it by prepending your hook script with the following #!/usr/bin/env bash source \"${0%/*}/.hookah/lib.sh\" hookah.init Learn more about it on GitHub","title":"Overview"},{"location":"api/#index","text":"hookah.init() hookah.run() hookah.run_allow_fail() hookah.die() hookah.warn() hookah.info() hookah.is_ci()","title":"Index"},{"location":"api/#hookahinit","text":"Initiates the environment, sets up stacktrace printing on the 'ERR' trap, and sets the directory to the root of the Git repository Function has no arguments.","title":"hookah.init()"},{"location":"api/#hookahrun","text":"Prints a command before running it","title":"hookah.run()"},{"location":"api/#arguments","text":"... (Command): to execute","title":"Arguments"},{"location":"api/#hookahrun_allow_fail","text":"Prints a command before running it. But, if the command fails, do not abort execution","title":"hookah.run_allow_fail()"},{"location":"api/#arguments_1","text":"... (Command): to execute","title":"Arguments"},{"location":"api/#hookahdie","text":"Prints $1 formatted as an error and the stacktrace to standard error, then exits with code 1","title":"hookah.die()"},{"location":"api/#arguments_2","text":"$1 (string): Text to print","title":"Arguments"},{"location":"api/#hookahwarn","text":"Prints $1 formatted as a warning to standard error","title":"hookah.warn()"},{"location":"api/#arguments_3","text":"$1 (string): Text to print","title":"Arguments"},{"location":"api/#hookahinfo","text":"Prints $1 formatted as information to standard output","title":"hookah.info()"},{"location":"api/#arguments_4","text":"$1 (string): Text to print","title":"Arguments"},{"location":"api/#hookahis_ci","text":"Scans environment variables to determine if script is in a CI environment","title":"hookah.is_ci()"},{"location":"api/#variables-set","text":"REPLY (Current): provider for CI","title":"Variables set"},{"location":"api/#exit-codes","text":"0 : If in CI 1 : If not in CI","title":"Exit codes"},{"location":"guide/","text":"Guide The usage of Hookah is similar to Husky . To install Husky to a project using Git, run the following $ hookah refresh Hookah [exec]: git config --local core.hooksPath ./.hooks Hookah [exec]: mkdir -p ./.hooks/.hookah Hookah [exec]: cp -f /home/edwin/Docs/Programming/repos/Groups/Bash/hookah/pkg/share/lib.sh ./.hooks/.hookah/lib.sh You can see exactly which commands Hookah executes. Note that every person that wishes to run Git hooks must also run this command. To create a hook, you can manually create a file in ./.hooks/ with the proper name, or use the handy new subcommand $ hookah new A handy menu will print, showing all available hooks to use. To skip the menu, you can pass in a file name like so: $ hookah new pre-commit Lastly, to check your Hook files to ensure they are runnable by Git, use the check subcommand $ hookah check Hookah [info]: Done.","title":"Guide"},{"location":"guide/#guide","text":"The usage of Hookah is similar to Husky . To install Husky to a project using Git, run the following $ hookah refresh Hookah [exec]: git config --local core.hooksPath ./.hooks Hookah [exec]: mkdir -p ./.hooks/.hookah Hookah [exec]: cp -f /home/edwin/Docs/Programming/repos/Groups/Bash/hookah/pkg/share/lib.sh ./.hooks/.hookah/lib.sh You can see exactly which commands Hookah executes. Note that every person that wishes to run Git hooks must also run this command. To create a hook, you can manually create a file in ./.hooks/ with the proper name, or use the handy new subcommand $ hookah new A handy menu will print, showing all available hooks to use. To skip the menu, you can pass in a file name like so: $ hookah new pre-commit Lastly, to check your Hook files to ensure they are runnable by Git, use the check subcommand $ hookah check Hookah [info]: Done.","title":"Guide"}]}